
services:

  # Servicio RabbitMQ con la consola de administración habilitada
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"     # Puerto para comunicación con microservicios
      - "15672:15672"   # Puerto para la consola de administración
    volumes:
      - ./definitions.json:/etc/rabbitmq/definitions.json
    environment:
      - RABBITMQ_USER=guest
      - RABBITMQ_PASS=guest
    networks:
      - backend-services-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always   # Reiniciar el contenedor automáticamente si falla


  # Servicio MongoDB con persistencia de datos
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    networks:
      - backend-services-network
    environment:
      - MONGO_INITDB_ROOT_USERNAME=bastian
      - MONGO_INITDB_ROOT_PASSWORD=25febrero
    volumes:
      - mongo_data:/data/db   # Persistencia de datos de MongoDB
    restart: always           # Reiniciar automáticamente en caso de fallo

  # Servicio BFF (Backend for Frontend)
  bff:
    build: ./bff-service
    container_name: bff-service
    ports: 
      - "3000:3000"
    depends_on:
      - rabbitmq
    environment:
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - BFF_SERVICE_PORT=3000
    networks:
      - backend-services-network
    restart: always
    command: npm run start:dev  # Ejecutar el servicio en modo desarrollo
  
  # Servicio de Usuarios (Usuarios-Microservicio)
  users-service:
    build: ./user-mongodb-service
    container_name: user-service
    ports: 
      - "3001:3001"
    depends_on:
      - rabbitmq
      - mongodb
    environment:
      - MONGODB_URI=mongodb+srv://admin:admin@cluster0.u26nn.mongodb.net/?retryWrites=true&w=majority
      - RABBITMQ_URL=amqp://rabbitmq:5672
    networks:
      - backend-services-network
    restart: always
    command: npm run start:dev  # Ejecutar el servicio en modo desarrollo
  
  # Servicio de Simulaciones (Simulaciones-Microservicio)
  simulation-service:
    build: ./simulation-mongodb-service
    container_name: simulation-service
    ports: 
      - "3002:3002"
    depends_on:
      - rabbitmq
      - mongodb
    environment:
      - MONGODB_URI=mongodb+srv://admin:admin@cluster0.u26nn.mongodb.net/?retryWrites=true&w=majority
      - RABBITMQ_URL=amqp://rabbitmq:5672
    networks:
      - backend-services-network
    restart: always
    command: npm run start:dev  # Ejecutar el servicio en modo desarrollo

networks:
  backend-services-network:
    driver: bridge  # Crear una red puente para los servicios de backend

volumes:
  mongo_data:     # Volumen para la persistencia de MongoDB
  rabbitmq_data:  # Volumen para la persistencia de RabbitMQ