
services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    hostname: rabbitmq
    volumes:
      - /var/lib/rabbitmq
    ports:
      - "5672:5672"     # Puerto para comunicación con microservicios
      - "15672:15672"   # Puerto para la consola de administración
    environment:
      - RABBITMQ_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_PASS=${RABBITMQ_DEFAULT_PASS}
    networks:
      - backend-services-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 5

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:${USER_DATABASE_PORT}"
    networks:
      - backend-services-network
    environment:
      MONGO_INITDB_ROOT_USERNAME=${USER_MONGO}
      MONGO_INITDB_ROOT_PASSWORD=${USER_MONGO_PASSWORD}
    volumes:
      - mongo_data:/data/db

  BFF:
    build: ./bff-service
    container_name: bff_service
    ports: "3000:3000"
    depends_on:
      - rabbitmq
      - mongodb
    environment:
      - RABBITMQ_URL=${RABBITMQ_URL}
    networks:
      - backend-services-network
    restart: always
  
  users-service:
    build: ./users
    container_name: user-service
    ports: ["3001:${USER_SERVICE_PORT}"]
    depends_on:
      - rabbitmq
      - mongodb
    environment:
      - MONGODB_URI=mongodb+srv://${USER_MONGO}:${USER_MONGO_PASSWORD}@${USER_MONGO_CLUSTER}/?retryWrites=true&w=majority=${USER_MONGO_DATABASE}
      - RABBITMQ_URL=${RABBITMQ_URL}
    networks:
      - backend-services-network

networks:
  backend-services-network:
    driver: bridge